// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizadorlexicozamoranoomar/codJFlex.flex

package analizadorlexicozamoranoomar;
import static analizadorlexicozamoranoomar.Tokens.*;

@SuppressWarnings("fallthrough")
class codJFlex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\3\5\1\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\12\17\2\13\1\20\1\21\1\20"+
    "\2\5\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\0\1\57"+
    "\1\0\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\0\1\113\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\1"+
    "\1\7\2\1\1\10\1\11\1\12\30\13\1\14\1\15"+
    "\27\13\1\16\1\17\2\1\1\0\1\20\1\0\1\21"+
    "\1\10\1\2\1\0\37\13\1\22\3\13\1\23\1\24"+
    "\1\25\16\13\1\26\47\13\1\27\10\13\1\30\11\13"+
    "\1\31\1\13\1\22\43\13\1\32\13\13\1\0\1\10"+
    "\1\33\2\13\1\26\7\13\1\34\1\35\5\13\1\36"+
    "\2\13\1\37\1\13\1\40\4\13\1\41\3\13\1\42"+
    "\2\13\1\43\2\13\1\44\3\13\1\45\1\46\1\47"+
    "\1\50\4\13\1\51\5\13\1\52\5\13\1\53\5\13"+
    "\1\12\1\54\1\55\10\13\1\56\2\13\1\57\6\13"+
    "\1\60\16\13\1\30\1\61\1\13\1\62\14\13\1\27"+
    "\13\13\1\60\4\13\1\63\7\13\1\51\1\64\1\65"+
    "\15\13\1\64\1\13\1\66\22\13\1\67\1\13\1\70"+
    "\13\13\1\1\5\13\1\71\6\13\1\72\2\13\1\61"+
    "\1\13\1\40\1\13\1\73\2\13\1\74\1\13\1\32"+
    "\7\13\1\75\2\13\1\76\1\77\3\13\1\100\2\13"+
    "\1\101\1\13\1\102\4\13\1\103\24\13\1\104\7\13"+
    "\1\105\6\13\1\106\1\107\12\13\1\110\1\111\7\13"+
    "\1\112\1\27\2\13\1\0\1\13\1\0\10\13\1\113"+
    "\15\13\1\114\1\13\1\115\16\13\1\116\4\13\1\117"+
    "\1\120\7\13\1\121\2\13\1\0\1\122\4\13\1\0"+
    "\6\13\1\123\1\124\1\125\1\126\1\127\16\13\1\130"+
    "\1\13\1\131\4\13\1\132\1\133\3\13\1\134\1\135"+
    "\1\136\1\13\1\60\4\13\1\137\21\13\1\140\2\0"+
    "\1\13\2\0\1\141\11\13\1\142\3\13\1\143\3\13"+
    "\1\144\4\13\1\145\7\13\1\146\1\147\1\13\1\150"+
    "\2\13\1\151\1\152\1\153\1\13\1\61\1\0\2\13"+
    "\2\0\1\154\1\13\1\155\1\13\1\156\1\0\7\13"+
    "\1\157\1\160\3\13\1\0\1\161\2\13\1\162\1\163"+
    "\2\13\1\164\5\13\1\165\2\13\1\64\4\13\1\166"+
    "\1\13\1\167\2\13\1\170\2\0\1\171\2\0\1\172"+
    "\12\13\1\173\1\174\1\153\7\13\1\175\1\176\1\0"+
    "\1\177\1\0\2\13\2\0\1\130\1\13\1\0\2\13"+
    "\1\200\2\13\1\201\1\13\1\202\1\13\1\0\12\13"+
    "\4\0\2\13\1\203\1\204\10\13\2\0\1\13\2\0"+
    "\1\154\1\13\1\203\1\0\1\205\1\13\1\206\1\0"+
    "\2\13\1\207\1\0\3\13\4\0\1\13\1\210\1\13"+
    "\1\0\3\13\1\211\1\13\2\0\1\13\1\0\1\76"+
    "\1\212\1\0\1\13\1\213\2\13\1\0\2\13\1\214"+
    "\1\0\1\215\1\0\1\216\1\107\1\0\3\13\1\0"+
    "\1\217\1\13\2\0\3\13\1\0\1\220\1\221\1\222"+
    "\1\0\1\13\1\223\1\13\1\0\1\224\1\225\1\0"+
    "\1\226\2\13\1\227\1\0\1\13\1\0\1\43\2\0"+
    "\1\230";

  private static int [] zzUnpackAction() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\114\0\114\0\114"+
    "\0\u017c\0\114\0\u01c8\0\u0214\0\u0260\0\114\0\u02ac\0\u02f8"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558"+
    "\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8"+
    "\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\114"+
    "\0\114\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0"+
    "\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40"+
    "\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0"+
    "\0\114\0\114\0\u10ec\0\u1138\0\u0130\0\114\0\u1184\0\114"+
    "\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4"+
    "\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644"+
    "\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4"+
    "\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04"+
    "\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u05f0\0\u1d18"+
    "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78"+
    "\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8"+
    "\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438"+
    "\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8"+
    "\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018"+
    "\0\u05f0\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c"+
    "\0\u3278\0\u32c4\0\u05f0\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440"+
    "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0"+
    "\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900"+
    "\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60"+
    "\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0"+
    "\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020"+
    "\0\u406c\0\u40b8\0\u4104\0\u4150\0\u419c\0\u1268\0\u05f0\0\u41e8"+
    "\0\u4234\0\u05f0\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc"+
    "\0\u4448\0\u05f0\0\u05f0\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4"+
    "\0\u05f0\0\u4610\0\u465c\0\u05f0\0\u46a8\0\u46f4\0\u4740\0\u478c"+
    "\0\u47d8\0\u4824\0\u05f0\0\u4870\0\u48bc\0\u4908\0\u05f0\0\u4954"+
    "\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68\0\u4bb4"+
    "\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4"+
    "\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u05f0\0\u4ef8"+
    "\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u05f0\0\u5074\0\u50c0\0\u510c"+
    "\0\u5158\0\u51a4\0\u05f0\0\u05f0\0\u05f0\0\u51f0\0\u523c\0\u5288"+
    "\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404\0\u05f0\0\u5450\0\u549c"+
    "\0\u05f0\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664\0\u05f0"+
    "\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0\0\u582c\0\u5878\0\u58c4"+
    "\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24"+
    "\0\u5b70\0\u05f0\0\u5bbc\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u5d38"+
    "\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c\0\u5f98"+
    "\0\u5fe4\0\u6030\0\u607c\0\u60c8\0\u6114\0\u6160\0\u61ac\0\u61f8"+
    "\0\u6244\0\u6290\0\u62dc\0\u6328\0\u6374\0\u63c0\0\u640c\0\u05f0"+
    "\0\u6458\0\u64a4\0\u64f0\0\u653c\0\u6588\0\u65d4\0\u6620\0\u05f0"+
    "\0\u05f0\0\u05f0\0\u666c\0\u66b8\0\u6704\0\u6750\0\u679c\0\u67e8"+
    "\0\u6834\0\u6880\0\u68cc\0\u6918\0\u6964\0\u69b0\0\u69fc\0\u6a48"+
    "\0\u6a94\0\u05f0\0\u6ae0\0\u6b2c\0\u6b78\0\u6bc4\0\u6c10\0\u6c5c"+
    "\0\u6ca8\0\u6cf4\0\u6d40\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70\0\u6ebc"+
    "\0\u6f08\0\u6f54\0\u6fa0\0\u6fec\0\u05f0\0\u7038\0\u05f0\0\u7084"+
    "\0\u70d0\0\u711c\0\u7168\0\u71b4\0\u7200\0\u724c\0\u7298\0\u72e4"+
    "\0\u7330\0\u737c\0\u419c\0\u73c8\0\u7414\0\u7460\0\u74ac\0\u74f8"+
    "\0\u05f0\0\u7544\0\u7590\0\u75dc\0\u7628\0\u7674\0\u76c0\0\u05f0"+
    "\0\u770c\0\u7758\0\u77a4\0\u77f0\0\u05f0\0\u783c\0\u05f0\0\u7888"+
    "\0\u78d4\0\u05f0\0\u7920\0\u05f0\0\u796c\0\u79b8\0\u7a04\0\u7a50"+
    "\0\u7a9c\0\u7ae8\0\u7b34\0\u05f0\0\u7b80\0\u7bcc\0\u05f0\0\u05f0"+
    "\0\u7c18\0\u7c64\0\u7cb0\0\u05f0\0\u7cfc\0\u7d48\0\u05f0\0\u7d94"+
    "\0\u05f0\0\u7de0\0\u7e2c\0\u7e78\0\u7ec4\0\u7f10\0\u7f5c\0\u7fa8"+
    "\0\u7ff4\0\u8040\0\u808c\0\u80d8\0\u8124\0\u8170\0\u81bc\0\u8208"+
    "\0\u8254\0\u82a0\0\u82ec\0\u8338\0\u8384\0\u83d0\0\u841c\0\u8468"+
    "\0\u84b4\0\u8500\0\u05f0\0\u854c\0\u8598\0\u85e4\0\u8630\0\u867c"+
    "\0\u86c8\0\u8714\0\u05f0\0\u8760\0\u87ac\0\u87f8\0\u8844\0\u8890"+
    "\0\u88dc\0\u05f0\0\u8928\0\u8974\0\u89c0\0\u8a0c\0\u8a58\0\u8aa4"+
    "\0\u8af0\0\u8b3c\0\u8b88\0\u8bd4\0\u8c20\0\u05f0\0\u05f0\0\u8c6c"+
    "\0\u8cb8\0\u8d04\0\u8d50\0\u8d9c\0\u8de8\0\u8e34\0\u05f0\0\u05f0"+
    "\0\u8e80\0\u8ecc\0\u8f18\0\u8f64\0\u8fb0\0\u8ffc\0\u9048\0\u9094"+
    "\0\u90e0\0\u912c\0\u9178\0\u91c4\0\u9210\0\u05f0\0\u925c\0\u92a8"+
    "\0\u92f4\0\u9340\0\u938c\0\u93d8\0\u9424\0\u9470\0\u94bc\0\u9508"+
    "\0\u9554\0\u95a0\0\u95ec\0\u05f0\0\u9638\0\u05f0\0\u9684\0\u96d0"+
    "\0\u971c\0\u9768\0\u97b4\0\u9800\0\u984c\0\u9898\0\u98e4\0\u9930"+
    "\0\u997c\0\u99c8\0\u9a14\0\u9a60\0\u05f0\0\u9aac\0\u9af8\0\u9b44"+
    "\0\u9b90\0\u05f0\0\u05f0\0\u9bdc\0\u9c28\0\u9c74\0\u9cc0\0\u9d0c"+
    "\0\u9d58\0\u9da4\0\u05f0\0\u9df0\0\u9e3c\0\u9e88\0\u05f0\0\u9ed4"+
    "\0\u9f20\0\u9f6c\0\u9fb8\0\ua004\0\ua050\0\ua09c\0\ua0e8\0\ua134"+
    "\0\ua180\0\ua1cc\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\ua218"+
    "\0\ua264\0\ua2b0\0\ua2fc\0\ua348\0\ua394\0\ua3e0\0\ua42c\0\ua478"+
    "\0\ua4c4\0\ua510\0\ua55c\0\ua5a8\0\ua5f4\0\ua640\0\ua68c\0\u05f0"+
    "\0\ua6d8\0\ua724\0\ua770\0\ua7bc\0\u05f0\0\u05f0\0\ua808\0\ua854"+
    "\0\ua8a0\0\u05f0\0\u05f0\0\u05f0\0\ua8ec\0\ua938\0\ua984\0\ua9d0"+
    "\0\uaa1c\0\uaa68\0\u05f0\0\uaab4\0\uab00\0\uab4c\0\uab98\0\uabe4"+
    "\0\uac30\0\uac7c\0\uacc8\0\uad14\0\uad60\0\uadac\0\uadf8\0\uae44"+
    "\0\uae90\0\uaedc\0\uaf28\0\uaf74\0\u05f0\0\uafc0\0\ub00c\0\ub058"+
    "\0\ub0a4\0\ub0f0\0\u05f0\0\ub13c\0\ub188\0\ub1d4\0\ub220\0\ub26c"+
    "\0\ub2b8\0\ub304\0\ub350\0\ub39c\0\u05f0\0\ub3e8\0\ub434\0\ub480"+
    "\0\u05f0\0\ub4cc\0\ub518\0\ub564\0\u05f0\0\ub5b0\0\ub5fc\0\ub648"+
    "\0\ub694\0\u05f0\0\ub6e0\0\ub72c\0\ub778\0\ub7c4\0\ub810\0\ub85c"+
    "\0\ub8a8\0\u05f0\0\u05f0\0\ub8f4\0\u05f0\0\ub940\0\ub98c\0\u05f0"+
    "\0\u05f0\0\ub9d8\0\uba24\0\u05f0\0\uba70\0\ubabc\0\ubb08\0\ubb54"+
    "\0\ubba0\0\u05f0\0\ubbec\0\u05f0\0\ubc38\0\u05f0\0\ubc84\0\ubcd0"+
    "\0\ubd1c\0\ubd68\0\ubdb4\0\ube00\0\ube4c\0\ube98\0\u05f0\0\u05f0"+
    "\0\ubee4\0\ubf30\0\ubf7c\0\ubfc8\0\u05f0\0\uc014\0\uc060\0\u05f0"+
    "\0\u05f0\0\uc0ac\0\uc0f8\0\u05f0\0\uc144\0\uc190\0\uc1dc\0\uc228"+
    "\0\uc274\0\u05f0\0\uc2c0\0\uc30c\0\ub810\0\uc358\0\uc3a4\0\uc3f0"+
    "\0\uc43c\0\u05f0\0\uc488\0\u05f0\0\uc4d4\0\uc520\0\u05f0\0\uc56c"+
    "\0\uc5b8\0\u05f0\0\uc604\0\uc650\0\u05f0\0\uc69c\0\uc6e8\0\uc734"+
    "\0\uc780\0\uc7cc\0\uc818\0\uc864\0\uc8b0\0\uc8fc\0\uc948\0\u05f0"+
    "\0\u05f0\0\u05f0\0\uc994\0\uc9e0\0\uca2c\0\uca78\0\ucac4\0\ucb10"+
    "\0\ucb5c\0\u05f0\0\u05f0\0\ucba8\0\u05f0\0\ucbf4\0\ucc40\0\ucc8c"+
    "\0\uccd8\0\ucd24\0\u05f0\0\ucd70\0\ucdbc\0\uce08\0\uce54\0\u05f0"+
    "\0\ucea0\0\uceec\0\u05f0\0\ucf38\0\u05f0\0\ucf84\0\ucfd0\0\ud01c"+
    "\0\ud068\0\ud0b4\0\ud100\0\ud14c\0\ud198\0\ud1e4\0\ud230\0\ud27c"+
    "\0\ud2c8\0\ud314\0\ud360\0\ud3ac\0\ud3f8\0\ud444\0\ud490\0\u05f0"+
    "\0\u05f0\0\ud4dc\0\ud528\0\ud574\0\ud5c0\0\ud60c\0\ud658\0\ud6a4"+
    "\0\ud6f0\0\ud73c\0\ud788\0\ud7d4\0\ud820\0\ud86c\0\114\0\ud8b8"+
    "\0\114\0\ud904\0\u05f0\0\ud950\0\u05f0\0\ud99c\0\ud9e8\0\uda34"+
    "\0\u05f0\0\uda80\0\udacc\0\udb18\0\udb64\0\udbb0\0\udbfc\0\udc48"+
    "\0\udc94\0\udce0\0\u05f0\0\udd2c\0\udd78\0\uddc4\0\ude10\0\ude5c"+
    "\0\u05f0\0\udea8\0\udef4\0\udf40\0\udf8c\0\udfd8\0\114\0\u05f0"+
    "\0\ue024\0\ue070\0\114\0\ue0bc\0\ue108\0\ue154\0\ue1a0\0\ue1ec"+
    "\0\u05f0\0\ue238\0\114\0\ue284\0\114\0\u05f0\0\ue2d0\0\ue31c"+
    "\0\ue368\0\ue3b4\0\ue400\0\114\0\ue44c\0\ue498\0\ue4e4\0\ue530"+
    "\0\ue57c\0\ue5c8\0\ue614\0\u05f0\0\114\0\114\0\ue660\0\ue6ac"+
    "\0\u05f0\0\ue6f8\0\ue744\0\114\0\114\0\ue790\0\u05f0\0\ue7dc"+
    "\0\ue828\0\114\0\ue874\0\ue8c0\0\ue90c\0\u05f0\0\ue958\0\ue9a4"+
    "\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\12\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\32\1\45"+
    "\1\46\1\32\1\47\1\50\1\2\1\51\1\32\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\2\32\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\32\1\77\1\100"+
    "\1\101\1\102\115\0\2\3\1\0\1\3\126\0\1\103"+
    "\2\0\32\104\3\0\33\104\2\0\6\105\1\106\46\105"+
    "\1\107\36\105\4\0\1\110\113\0\1\110\12\0\1\111"+
    "\100\0\1\110\11\0\1\112\112\0\1\113\1\0\1\15"+
    "\2\0\32\104\3\0\33\104\23\0\1\16\111\0\1\32"+
    "\2\0\3\32\1\114\7\32\1\115\1\32\1\116\6\32"+
    "\1\117\1\120\4\32\3\0\20\32\1\121\12\32\21\0"+
    "\1\32\2\0\4\32\1\122\23\32\1\123\1\32\3\0"+
    "\33\32\21\0\1\32\2\0\1\124\6\32\1\125\3\32"+
    "\1\126\1\127\1\32\1\130\2\32\1\131\10\32\3\0"+
    "\17\32\1\132\13\32\21\0\1\32\2\0\1\133\3\32"+
    "\1\134\3\32\1\135\10\32\1\136\4\32\1\137\3\32"+
    "\3\0\33\32\21\0\1\32\2\0\15\32\1\140\2\32"+
    "\1\141\4\32\1\142\1\32\1\143\2\32\3\0\33\32"+
    "\21\0\1\32\2\0\1\144\15\32\1\145\2\32\1\146"+
    "\2\32\1\147\1\32\1\137\3\32\3\0\33\32\21\0"+
    "\1\32\2\0\4\32\1\150\14\32\1\151\10\32\3\0"+
    "\33\32\21\0\1\32\2\0\1\152\31\32\3\0\33\32"+
    "\21\0\1\32\2\0\15\32\1\153\3\32\1\154\1\155"+
    "\7\32\3\0\16\32\1\156\14\32\21\0\1\32\2\0"+
    "\4\32\1\157\1\32\1\160\4\32\1\161\1\162\1\163"+
    "\1\164\13\32\3\0\33\32\21\0\1\32\2\0\32\32"+
    "\3\0\33\32\21\0\1\32\2\0\4\32\1\165\3\32"+
    "\1\166\21\32\3\0\33\32\21\0\1\32\2\0\1\167"+
    "\7\32\1\170\5\32\1\171\5\32\1\172\5\32\3\0"+
    "\5\32\1\173\25\32\21\0\1\32\2\0\4\32\1\174"+
    "\11\32\1\175\5\32\1\176\5\32\3\0\33\32\21\0"+
    "\1\32\2\0\5\32\1\177\13\32\1\200\10\32\3\0"+
    "\20\32\1\201\12\32\21\0\1\32\2\0\16\32\1\202"+
    "\2\32\1\203\1\32\1\144\1\204\5\32\3\0\17\32"+
    "\1\205\2\32\1\206\10\32\21\0\1\32\2\0\26\32"+
    "\1\137\3\32\3\0\33\32\21\0\1\32\2\0\4\32"+
    "\1\207\3\32\1\210\5\32\1\211\13\32\3\0\33\32"+
    "\21\0\1\32\2\0\1\212\3\32\1\213\2\32\1\214"+
    "\14\32\1\215\5\32\3\0\5\32\1\216\25\32\21\0"+
    "\1\32\2\0\1\32\1\217\17\32\1\220\10\32\3\0"+
    "\33\32\21\0\1\32\2\0\15\32\1\221\1\32\1\222"+
    "\12\32\3\0\33\32\21\0\1\32\2\0\7\32\1\223"+
    "\6\32\1\224\13\32\3\0\33\32\21\0\1\32\2\0"+
    "\16\32\1\225\13\32\3\0\33\32\21\0\1\32\2\0"+
    "\10\32\1\226\21\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\2\32\1\227\1\230\1\231\7\32\1\232"+
    "\3\32\1\121\2\32\1\233\1\32\1\234\1\32\1\235"+
    "\3\32\21\0\1\32\2\0\32\32\3\0\1\32\1\236"+
    "\7\32\1\237\5\32\1\240\2\32\1\241\6\32\1\242"+
    "\1\32\21\0\1\32\2\0\32\32\3\0\1\32\1\243"+
    "\6\32\1\244\3\32\1\245\2\32\1\246\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\247\11\32\1\250"+
    "\5\32\1\251\5\32\21\0\1\32\2\0\32\32\3\0"+
    "\14\32\1\252\1\253\1\254\7\32\1\255\1\32\1\256"+
    "\2\32\21\0\1\32\2\0\32\32\3\0\11\32\1\257"+
    "\2\32\1\260\1\32\1\261\1\262\2\32\1\263\2\32"+
    "\1\264\5\32\21\0\1\32\2\0\32\32\3\0\5\32"+
    "\1\265\11\32\1\266\1\267\1\32\1\270\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\1\32\1\271\3\32\1\272"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\6\32\1\273"+
    "\6\32\1\274\1\275\14\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\276\3\32\1\277\11\32\1\300\13\32"+
    "\21\0\1\32\2\0\32\32\3\0\1\32\1\301\3\32"+
    "\1\302\3\32\1\303\5\32\1\304\5\32\1\305\5\32"+
    "\21\0\1\32\2\0\32\32\3\0\3\32\1\306\1\32"+
    "\1\307\17\32\1\310\5\32\21\0\1\32\2\0\32\32"+
    "\3\0\2\32\1\311\15\32\1\201\3\32\1\312\1\32"+
    "\1\313\4\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\314\3\32\1\315\3\32\1\316\5\32\1\317\2\32"+
    "\1\320\2\32\1\321\1\32\1\322\3\32\21\0\1\32"+
    "\2\0\32\32\3\0\25\32\1\323\5\32\21\0\1\32"+
    "\2\0\32\32\3\0\1\32\1\324\3\32\1\325\3\32"+
    "\1\326\21\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\327\3\32\1\330\3\32\1\331\6\32\1\332\3\32"+
    "\1\333\1\334\1\32\1\335\1\32\1\336\1\32\21\0"+
    "\1\32\2\0\32\32\3\0\1\32\1\337\6\32\1\340"+
    "\6\32\1\341\2\32\1\342\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\1\32\1\343\14\32\1\344\1\32\1\345"+
    "\12\32\21\0\1\32\2\0\32\32\3\0\1\32\1\346"+
    "\7\32\1\347\5\32\1\350\13\32\21\0\1\32\2\0"+
    "\32\32\3\0\10\32\1\351\1\352\21\32\21\0\1\32"+
    "\2\0\32\32\3\0\11\32\1\353\21\32\21\0\1\32"+
    "\2\0\32\32\3\0\11\32\1\354\21\32\17\0\1\355"+
    "\1\0\1\103\113\0\1\104\2\0\32\104\3\0\33\104"+
    "\2\0\2\105\2\0\110\105\15\0\1\113\1\0\1\111"+
    "\74\0\2\112\2\0\110\112\17\0\1\356\113\0\1\32"+
    "\2\0\3\32\1\357\26\32\3\0\33\32\21\0\1\32"+
    "\2\0\10\32\1\360\12\32\1\361\6\32\3\0\33\32"+
    "\21\0\1\32\2\0\3\32\1\362\26\32\3\0\33\32"+
    "\21\0\1\32\2\0\23\32\1\363\6\32\3\0\33\32"+
    "\21\0\1\32\2\0\6\32\1\357\23\32\3\0\33\32"+
    "\21\0\1\32\2\0\32\32\3\0\20\32\1\364\12\32"+
    "\21\0\1\32\2\0\23\32\1\365\6\32\3\0\33\32"+
    "\21\0\1\32\2\0\23\32\1\366\6\32\3\0\33\32"+
    "\21\0\1\32\2\0\13\32\1\367\6\32\1\370\7\32"+
    "\3\0\33\32\21\0\1\32\2\0\4\32\1\371\25\32"+
    "\3\0\33\32\21\0\1\32\2\0\22\32\1\372\7\32"+
    "\3\0\33\32\21\0\1\32\2\0\17\32\1\373\12\32"+
    "\3\0\33\32\21\0\1\32\2\0\14\32\1\374\7\32"+
    "\1\375\5\32\3\0\33\32\21\0\1\32\2\0\4\32"+
    "\1\376\25\32\3\0\33\32\21\0\1\32\2\0\32\32"+
    "\3\0\14\32\1\377\16\32\21\0\1\32\2\0\23\32"+
    "\1\u0100\6\32\3\0\33\32\21\0\1\32\2\0\2\32"+
    "\1\u0101\2\32\1\u0102\5\32\1\u0103\16\32\3\0\33\32"+
    "\21\0\1\32\2\0\25\32\1\u0104\4\32\3\0\33\32"+
    "\21\0\1\32\2\0\16\32\1\u0105\13\32\3\0\33\32"+
    "\21\0\1\32\2\0\16\32\1\224\13\32\3\0\33\32"+
    "\21\0\1\32\2\0\3\32\1\u0106\26\32\3\0\33\32"+
    "\21\0\1\32\2\0\24\32\1\u0107\5\32\3\0\33\32"+
    "\21\0\1\32\2\0\1\u0108\31\32\3\0\33\32\21\0"+
    "\1\32\2\0\2\32\1\u0109\5\32\1\u010a\21\32\3\0"+
    "\33\32\21\0\1\32\2\0\21\32\1\u010b\10\32\3\0"+
    "\33\32\21\0\1\32\2\0\21\32\1\u010c\10\32\3\0"+
    "\33\32\21\0\1\32\2\0\16\32\1\u010d\13\32\3\0"+
    "\33\32\21\0\1\32\2\0\13\32\1\u010e\16\32\3\0"+
    "\33\32\21\0\1\32\2\0\23\32\1\u010f\6\32\3\0"+
    "\33\32\21\0\1\32\2\0\16\32\1\u0110\13\32\3\0"+
    "\33\32\21\0\1\32\2\0\25\32\1\u0111\4\32\3\0"+
    "\33\32\21\0\1\32\2\0\2\32\1\u0112\12\32\1\u0113"+
    "\4\32\1\u0114\1\u0115\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\4\32\1\u0116\25\32\3\0\33\32\21\0\1\32"+
    "\2\0\15\32\1\u0117\14\32\3\0\33\32\21\0\1\32"+
    "\2\0\32\32\3\0\20\32\1\u0118\12\32\21\0\1\32"+
    "\2\0\4\32\1\u0119\25\32\3\0\33\32\21\0\1\32"+
    "\2\0\4\32\1\u011a\25\32\3\0\33\32\21\0\1\32"+
    "\2\0\17\32\1\u011b\12\32\3\0\33\32\21\0\1\32"+
    "\2\0\4\32\1\u011c\25\32\3\0\33\32\21\0\1\32"+
    "\2\0\10\32\1\u011d\21\32\3\0\33\32\21\0\1\32"+
    "\2\0\5\32\1\u011e\24\32\3\0\33\32\21\0\1\32"+
    "\2\0\12\32\1\u011f\1\32\1\u0120\15\32\3\0\33\32"+
    "\21\0\1\32\2\0\27\32\1\357\2\32\3\0\33\32"+
    "\21\0\1\32\2\0\15\32\1\357\14\32\3\0\33\32"+
    "\21\0\1\32\2\0\25\32\1\u0121\4\32\3\0\33\32"+
    "\21\0\1\32\2\0\13\32\1\357\16\32\3\0\33\32"+
    "\21\0\1\32\2\0\32\32\3\0\22\32\1\u0122\10\32"+
    "\21\0\1\32\2\0\1\144\31\32\3\0\33\32\21\0"+
    "\1\32\2\0\23\32\1\362\6\32\3\0\33\32\21\0"+
    "\1\32\2\0\13\32\1\u0123\16\32\3\0\33\32\21\0"+
    "\1\32\2\0\5\32\1\u0124\24\32\3\0\33\32\21\0"+
    "\1\32\2\0\3\32\1\u0125\26\32\3\0\33\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u0126\25\32\21\0"+
    "\1\32\2\0\17\32\1\u0127\12\32\3\0\33\32\21\0"+
    "\1\32\2\0\10\32\1\u0128\21\32\3\0\33\32\21\0"+
    "\1\32\2\0\22\32\1\u0129\7\32\3\0\33\32\21\0"+
    "\1\32\2\0\32\32\3\0\23\32\1\u012a\7\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u012b\13\32\21\0"+
    "\1\32\2\0\22\32\1\u012c\1\u012d\6\32\3\0\33\32"+
    "\21\0\1\32\2\0\6\32\1\u012e\23\32\3\0\33\32"+
    "\21\0\1\32\2\0\13\32\1\u012f\16\32\3\0\33\32"+
    "\21\0\1\32\2\0\25\32\1\u0130\4\32\3\0\33\32"+
    "\21\0\1\32\2\0\6\32\1\u0131\4\32\1\u0132\7\32"+
    "\1\u0133\6\32\3\0\33\32\21\0\1\32\2\0\13\32"+
    "\1\u0134\5\32\1\u0135\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\1\32\1\357\12\32\1\357\15\32\3\0\33\32"+
    "\21\0\1\32\2\0\32\32\3\0\1\32\1\u0136\31\32"+
    "\21\0\1\32\2\0\30\32\1\123\1\32\3\0\33\32"+
    "\21\0\1\32\2\0\1\u0137\7\32\1\u0138\13\32\1\u0139"+
    "\5\32\3\0\33\32\21\0\1\32\2\0\10\32\1\u013a"+
    "\21\32\3\0\33\32\21\0\1\32\2\0\3\32\1\u013b"+
    "\26\32\3\0\33\32\21\0\1\32\2\0\4\32\1\u013c"+
    "\25\32\3\0\33\32\21\0\1\32\2\0\21\32\1\u013d"+
    "\10\32\3\0\33\32\21\0\1\32\2\0\21\32\1\362"+
    "\10\32\3\0\33\32\21\0\1\32\2\0\17\32\1\u013e"+
    "\12\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\23\32\1\u013f\7\32\21\0\1\32\2\0\32\32\3\0"+
    "\21\32\1\u0140\11\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u0141\26\32\21\0\1\32\2\0\32\32\3\0"+
    "\14\32\1\u0142\16\32\21\0\1\32\2\0\32\32\3\0"+
    "\23\32\1\u0143\5\32\1\u0144\1\32\21\0\1\32\2\0"+
    "\32\32\3\0\4\32\1\u0145\26\32\21\0\1\32\2\0"+
    "\32\32\3\0\1\32\1\u0146\31\32\21\0\1\32\2\0"+
    "\32\32\3\0\3\32\1\u0147\27\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u0148\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\17\32\1\u0149\4\32\1\u014a\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u014b\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u014c\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u014d\6\32\1\u014e"+
    "\1\u014f\6\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\346\31\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\u0150\3\32\1\u0151\11\32\1\u0152\13\32\21\0\1\32"+
    "\2\0\32\32\3\0\14\32\1\377\1\u0153\1\u0154\1\32"+
    "\1\u0155\2\32\1\357\7\32\21\0\1\32\2\0\32\32"+
    "\3\0\3\32\1\u0156\2\32\1\u0157\5\32\1\u0158\16\32"+
    "\21\0\1\32\2\0\32\32\3\0\25\32\1\u0159\5\32"+
    "\21\0\1\32\2\0\32\32\3\0\20\32\1\u015a\12\32"+
    "\21\0\1\32\2\0\32\32\3\0\11\32\1\u015b\11\32"+
    "\1\u015c\7\32\21\0\1\32\2\0\32\32\3\0\20\32"+
    "\1\u015d\12\32\21\0\1\32\2\0\32\32\3\0\3\32"+
    "\1\u015e\21\32\1\u015f\5\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\u0160\31\32\21\0\1\32\2\0\32\32"+
    "\3\0\3\32\1\u0161\14\32\1\u0162\3\32\1\u0163\6\32"+
    "\21\0\1\32\2\0\32\32\3\0\16\32\1\u0164\11\32"+
    "\1\u0165\2\32\21\0\1\32\2\0\32\32\3\0\17\32"+
    "\1\u0166\13\32\21\0\1\32\2\0\32\32\3\0\22\32"+
    "\1\u0167\10\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\u0168\31\32\21\0\1\32\2\0\32\32\3\0\16\32"+
    "\1\u0169\14\32\21\0\1\32\2\0\32\32\3\0\24\32"+
    "\1\u010f\6\32\21\0\1\32\2\0\32\32\3\0\24\32"+
    "\1\u016a\6\32\21\0\1\32\2\0\32\32\3\0\11\32"+
    "\1\u016b\21\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\u016c\31\32\21\0\1\32\2\0\32\32\3\0\23\32"+
    "\1\u016d\7\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\u016e\7\32\1\u016f\21\32\21\0\1\32\2\0\32\32"+
    "\3\0\20\32\1\u0170\12\32\21\0\1\32\2\0\32\32"+
    "\3\0\11\32\1\u0171\6\32\1\u0118\2\32\1\u0172\1\u0173"+
    "\6\32\21\0\1\32\2\0\32\32\3\0\15\32\1\u0174"+
    "\15\32\21\0\1\32\2\0\32\32\3\0\6\32\1\u0175"+
    "\15\32\1\u0148\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\7\32\1\357\6\32\1\u0176\1\u0177\13\32\21\0\1\32"+
    "\2\0\32\32\3\0\20\32\1\u0178\1\32\1\u0179\1\32"+
    "\1\u017a\3\32\1\u017b\2\32\21\0\1\32\2\0\32\32"+
    "\3\0\22\32\1\u0122\1\32\1\u017c\6\32\21\0\1\32"+
    "\2\0\32\32\3\0\16\32\1\u017d\11\32\1\u017e\2\32"+
    "\21\0\1\32\2\0\32\32\3\0\4\32\1\u017f\21\32"+
    "\1\u0180\4\32\21\0\1\32\2\0\32\32\3\0\24\32"+
    "\1\u0181\6\32\21\0\1\32\2\0\32\32\3\0\10\32"+
    "\1\244\22\32\21\0\1\32\2\0\32\32\3\0\27\32"+
    "\1\u0182\3\32\21\0\1\32\2\0\32\32\3\0\14\32"+
    "\1\u0183\16\32\21\0\1\32\2\0\32\32\3\0\12\32"+
    "\1\u0184\20\32\21\0\1\32\2\0\32\32\3\0\10\32"+
    "\1\u0185\22\32\21\0\1\32\2\0\32\32\3\0\5\32"+
    "\1\u0186\25\32\21\0\1\32\2\0\32\32\3\0\3\32"+
    "\1\u0187\1\u0188\15\32\1\u0189\1\u018a\7\32\21\0\1\32"+
    "\2\0\32\32\3\0\22\32\1\u018b\10\32\21\0\1\32"+
    "\2\0\32\32\3\0\30\32\1\u018c\2\32\21\0\1\32"+
    "\2\0\32\32\3\0\22\32\1\u018d\1\u012a\7\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u018e\5\32\1\u018f"+
    "\13\32\21\0\1\32\2\0\32\32\3\0\2\32\1\u0190"+
    "\20\32\1\u0191\7\32\21\0\1\32\2\0\32\32\3\0"+
    "\15\32\1\u0192\15\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0193\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u0194\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u0195\4\32\1\u0196\5\32\1\u0197\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\7\32\1\u0198\23\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u0199\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\1\32\1\u0136\12\32\1\u019a"+
    "\7\32\1\u0133\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\357\13\32\1\u019b\21\0\1\32\2\0\32\32"+
    "\3\0\15\32\1\u019c\15\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\u019d\15\32\1\u019e\2\32\1\u019f\10\32"+
    "\21\0\1\32\2\0\32\32\3\0\20\32\1\u01a0\12\32"+
    "\21\0\1\32\2\0\32\32\3\0\11\32\1\u01a1\21\32"+
    "\21\0\1\32\2\0\32\32\3\0\16\32\1\u01a2\14\32"+
    "\21\0\1\32\2\0\32\32\3\0\16\32\1\357\14\32"+
    "\21\0\1\32\2\0\32\32\3\0\11\32\1\u01a3\10\32"+
    "\1\u01a4\10\32\21\0\1\32\2\0\32\32\3\0\20\32"+
    "\1\u01a5\12\32\21\0\1\32\2\0\32\32\3\0\1\32"+
    "\1\u01a6\27\32\1\u01a7\1\32\21\0\1\32\2\0\32\32"+
    "\3\0\22\32\1\u018d\10\32\21\0\1\32\2\0\32\32"+
    "\3\0\4\32\1\u01a8\16\32\1\u01a9\7\32\21\0\1\32"+
    "\2\0\32\32\3\0\4\32\1\u01aa\26\32\21\0\1\32"+
    "\2\0\32\32\3\0\22\32\1\u0148\10\32\21\0\1\32"+
    "\2\0\32\32\3\0\22\32\1\u01ab\1\u01ac\7\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u01ad\2\32\1\u01ae"+
    "\16\32\21\0\1\32\2\0\32\32\3\0\11\32\1\u01af"+
    "\21\32\21\0\1\32\2\0\32\32\3\0\4\32\1\u01b0"+
    "\17\32\1\u01b1\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u01b2\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\20\32\1\u013e\12\32\21\0\1\u01b3\113\0\1\32\2\0"+
    "\6\32\1\u01b4\23\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01b5\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\16\32\1\u01b6\13\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u01b7\25\32\21\0\1\32\2\0"+
    "\26\32\1\u01b8\3\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u0148\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\13\32\1\u01b9\16\32\3\0\33\32\21\0\1\32\2\0"+
    "\2\32\1\u01ba\27\32\3\0\33\32\21\0\1\32\2\0"+
    "\2\32\1\u01bb\27\32\3\0\33\32\21\0\1\32\2\0"+
    "\14\32\1\u01bc\15\32\3\0\33\32\21\0\1\32\2\0"+
    "\15\32\1\u01bd\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\1\u01be\31\32\3\0\33\32\21\0\1\32\2\0\32\32"+
    "\3\0\17\32\1\u01bf\13\32\21\0\1\32\2\0\1\u01c0"+
    "\31\32\3\0\33\32\21\0\1\32\2\0\1\u01c1\31\32"+
    "\3\0\33\32\21\0\1\32\2\0\4\32\1\u01c2\25\32"+
    "\3\0\33\32\21\0\1\32\2\0\17\32\1\u01c3\12\32"+
    "\3\0\33\32\21\0\1\32\2\0\10\32\1\u01c4\11\32"+
    "\1\u01c5\7\32\3\0\33\32\21\0\1\32\2\0\10\32"+
    "\1\u01c6\21\32\3\0\33\32\21\0\1\32\2\0\13\32"+
    "\1\u01c7\16\32\3\0\33\32\21\0\1\32\2\0\4\32"+
    "\1\u01c8\25\32\3\0\33\32\21\0\1\32\2\0\22\32"+
    "\1\u01c9\1\u01ca\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01cb\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\14\32\1\u01cc\15\32\3\0\33\32\21\0\1\32\2\0"+
    "\13\32\1\u01cd\16\32\3\0\33\32\21\0\1\32\2\0"+
    "\24\32\1\u01ce\5\32\3\0\33\32\21\0\1\32\2\0"+
    "\10\32\1\u01cf\21\32\3\0\33\32\21\0\1\32\2\0"+
    "\13\32\1\u01d0\16\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01d1\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01d2\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01d3\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u01d4\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\24\32\1\u01d5\5\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\25\32\1\u01d6\5\32\21\0\1\32\2\0"+
    "\15\32\1\u01d7\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u01cd\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01d8\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\10\32\1\u01d9\21\32\3\0\33\32\21\0\1\32\2\0"+
    "\22\32\1\u01da\7\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u01db\23\32\21\0\1\32\2\0"+
    "\13\32\1\u01dc\16\32\3\0\33\32\21\0\1\32\2\0"+
    "\22\32\1\u01dd\7\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01de\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u01df\14\32\21\0\1\32\2\0"+
    "\14\32\1\u01e0\15\32\3\0\33\32\21\0\1\32\2\0"+
    "\7\32\1\u01e1\22\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u01e2\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u01e3\23\32\21\0\1\32\2\0"+
    "\23\32\1\u01e4\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\7\32\1\u011e\22\32\3\0\33\32\21\0\1\32\2\0"+
    "\13\32\1\u01e5\16\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01e6\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\14\32\1\u01e7\15\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u01e8\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\14\32\1\u01e9\16\32\21\0\1\32\2\0"+
    "\15\32\1\u01ea\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\6\32\1\u01eb\23\32\3\0\33\32\21\0\1\32\2\0"+
    "\15\32\1\u01ec\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\16\32\1\u01ed\13\32\3\0\33\32\21\0\1\32\2\0"+
    "\1\u01ee\31\32\3\0\33\32\21\0\1\32\2\0\21\32"+
    "\1\u01ef\10\32\3\0\33\32\21\0\1\32\2\0\3\32"+
    "\1\u0148\26\32\3\0\33\32\21\0\1\32\2\0\32\32"+
    "\3\0\24\32\1\u01f0\6\32\21\0\1\32\2\0\32\32"+
    "\3\0\25\32\1\u01f1\5\32\21\0\1\32\2\0\32\32"+
    "\3\0\17\32\1\u01f2\13\32\21\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u01f3\25\32\21\0\1\32\2\0\32\32"+
    "\3\0\16\32\1\u01f4\14\32\21\0\1\32\2\0\32\32"+
    "\3\0\11\32\1\u01f5\21\32\21\0\1\32\2\0\32\32"+
    "\3\0\11\32\1\u01f6\21\32\21\0\1\32\2\0\32\32"+
    "\3\0\13\32\1\u01f7\17\32\21\0\1\32\2\0\32\32"+
    "\3\0\14\32\1\u01f8\16\32\21\0\1\32\2\0\32\32"+
    "\3\0\24\32\1\u01f9\6\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\u01fa\31\32\21\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u0148\25\32\21\0\1\32\2\0\32\32"+
    "\3\0\14\32\1\u01b9\16\32\21\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u01fb\25\32\21\0\1\32\2\0\32\32"+
    "\3\0\3\32\1\u01fc\27\32\21\0\1\32\2\0\32\32"+
    "\3\0\23\32\1\u01fd\7\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\u01fe\31\32\21\0\1\32\2\0\32\32"+
    "\3\0\16\32\1\u01ff\14\32\21\0\1\32\2\0\32\32"+
    "\3\0\20\32\1\u0200\12\32\21\0\1\32\2\0\32\32"+
    "\3\0\23\32\1\u0201\1\u0202\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\31\32\1\u0203\1\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u0204\10\32\1\u0205\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\1\32\1\u0206\3\32\1\u0207"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u0208"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\2\32\1\u0209"+
    "\30\32\21\0\1\32\2\0\32\32\3\0\6\32\1\u020a"+
    "\24\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u020b"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\24\32\1\u020c"+
    "\6\32\21\0\1\32\2\0\32\32\3\0\22\32\1\u0205"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\15\32\1\u0148"+
    "\15\32\21\0\1\32\2\0\32\32\3\0\14\32\1\u01c7"+
    "\16\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u020d"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\17\32\1\u020e"+
    "\13\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u020f"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\1\32\1\u0210"+
    "\31\32\21\0\1\32\2\0\32\32\3\0\24\32\1\u0211"+
    "\6\32\21\0\1\32\2\0\32\32\3\0\1\32\1\237"+
    "\31\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u0212"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\15\32\1\u0213"+
    "\15\32\21\0\1\32\2\0\32\32\3\0\3\32\1\u0214"+
    "\27\32\21\0\1\32\2\0\32\32\3\0\17\32\1\u011b"+
    "\13\32\21\0\1\32\2\0\32\32\3\0\17\32\1\u0192"+
    "\13\32\21\0\1\32\2\0\32\32\3\0\20\32\1\u0215"+
    "\12\32\21\0\1\32\2\0\32\32\3\0\10\32\1\u0216"+
    "\22\32\21\0\1\32\2\0\32\32\3\0\20\32\1\u0217"+
    "\12\32\21\0\1\32\2\0\32\32\3\0\7\32\1\u0218"+
    "\23\32\21\0\1\32\2\0\32\32\3\0\14\32\1\u0219"+
    "\2\32\1\u021a\13\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u01c0\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u021b\16\32\1\u021c\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u021d\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\2\32\1\u021e\30\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u021f\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u0148\23\32\21\0\1\32\2\0"+
    "\32\32\3\0\20\32\1\u0220\12\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u0221\23\32\21\0\1\32\2\0"+
    "\32\32\3\0\3\32\1\u0222\27\32\16\0\1\u0223\2\0"+
    "\1\32\2\0\32\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\10\32\1\u0224\22\32\16\0\1\u0225\2\0"+
    "\1\32\2\0\32\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u0226\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\25\32\1\u0227\5\32\21\0\1\32\2\0"+
    "\32\32\3\0\14\32\1\u01dc\16\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u0228\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u0229\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u022a\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\13\32\1\u022b\17\32\21\0\1\32\2\0"+
    "\32\32\3\0\4\32\1\u022c\26\32\21\0\1\32\2\0"+
    "\32\32\3\0\6\32\1\u022d\24\32\21\0\1\32\2\0"+
    "\32\32\3\0\23\32\1\u022e\7\32\21\0\1\32\2\0"+
    "\32\32\3\0\23\32\1\u022f\7\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u0230\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u0192\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\15\32\1\u0231\1\u0232\7\32\1\u0233\4\32"+
    "\21\0\1\32\2\0\32\32\3\0\24\32\1\u0234\6\32"+
    "\21\0\1\32\2\0\32\32\3\0\14\32\1\u0235\16\32"+
    "\21\0\1\32\2\0\32\32\3\0\10\32\1\u01e1\22\32"+
    "\21\0\1\32\2\0\32\32\3\0\25\32\1\u0236\5\32"+
    "\21\0\1\32\2\0\32\32\3\0\23\32\1\u0237\7\32"+
    "\21\0\1\32\2\0\32\32\3\0\6\32\1\u0238\24\32"+
    "\21\0\1\32\2\0\32\32\3\0\4\32\1\u0239\26\32"+
    "\21\0\1\32\2\0\32\32\3\0\25\32\1\u023a\5\32"+
    "\21\0\1\32\2\0\32\32\3\0\10\32\1\u023b\22\32"+
    "\21\0\1\32\2\0\32\32\3\0\24\32\1\u0216\6\32"+
    "\21\0\1\32\2\0\32\32\3\0\6\32\1\u023c\24\32"+
    "\21\0\1\32\2\0\32\32\3\0\5\32\1\u023d\25\32"+
    "\21\0\1\32\2\0\32\32\3\0\4\32\1\u023e\26\32"+
    "\21\0\1\32\2\0\32\32\3\0\3\32\1\u023f\20\32"+
    "\1\u0235\6\32\21\0\1\32\2\0\32\32\3\0\20\32"+
    "\1\u01ca\12\32\21\0\1\32\2\0\32\32\3\0\11\32"+
    "\1\u0240\13\32\1\u0241\5\32\21\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u0242\25\32\21\0\1\32\2\0\32\32"+
    "\3\0\24\32\1\u0243\6\32\21\0\1\32\2\0\32\32"+
    "\3\0\3\32\1\u0244\27\32\21\0\1\32\2\0\32\32"+
    "\3\0\23\32\1\u01cc\7\32\21\0\1\32\2\0\32\32"+
    "\3\0\17\32\1\u0245\13\32\21\0\1\32\2\0\32\32"+
    "\3\0\11\32\1\u0246\21\32\21\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u0247\25\32\21\0\1\32\2\0\32\32"+
    "\3\0\1\32\1\u0248\7\32\1\u0249\21\32\21\0\1\32"+
    "\2\0\32\32\3\0\1\32\1\u024a\31\32\21\0\1\32"+
    "\2\0\32\32\3\0\24\32\1\u024b\6\32\21\0\1\32"+
    "\2\0\32\32\3\0\11\32\1\u024c\21\32\21\0\1\32"+
    "\2\0\32\32\3\0\4\32\1\u024d\26\32\21\0\1\32"+
    "\2\0\32\32\3\0\1\32\1\u024e\31\32\21\0\1\32"+
    "\2\0\32\32\3\0\14\32\1\u024f\16\32\21\0\1\32"+
    "\2\0\32\32\3\0\24\32\1\u0250\6\32\21\0\1\32"+
    "\2\0\32\32\3\0\10\32\1\u015a\22\32\21\0\1\32"+
    "\2\0\32\32\3\0\14\32\1\u0251\16\32\21\0\1\32"+
    "\2\0\15\32\1\u0252\14\32\3\0\33\32\21\0\1\32"+
    "\2\0\21\32\1\u0253\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\32\32\3\0\1\u0254\32\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u0255\14\32\21\0\1\32\2\0"+
    "\4\32\1\u0256\25\32\3\0\33\32\21\0\1\32\2\0"+
    "\1\u0257\31\32\3\0\33\32\21\0\1\32\2\0\12\32"+
    "\1\u0253\17\32\3\0\33\32\21\0\1\32\2\0\10\32"+
    "\1\u0258\5\32\1\u0259\13\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\357\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\u025a\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\32\32\3\0\22\32\1\u025b\10\32\21\0\1\32"+
    "\2\0\24\32\1\u025c\5\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\u025d\6\32\3\0\33\32\6\0\1\u025e"+
    "\12\0\1\32\2\0\32\32\3\0\33\32\21\0\1\32"+
    "\2\0\5\32\1\u025f\24\32\3\0\33\32\21\0\1\32"+
    "\2\0\25\32\1\u0260\4\32\3\0\33\32\21\0\1\32"+
    "\2\0\17\32\1\u0261\12\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\u0262\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\10\32\1\u0263\21\32\3\0\33\32\6\0\1\u0264"+
    "\12\0\1\32\2\0\32\32\3\0\33\32\21\0\1\32"+
    "\2\0\17\32\1\u0265\12\32\3\0\33\32\21\0\1\32"+
    "\2\0\15\32\1\u0266\14\32\3\0\33\32\21\0\1\32"+
    "\2\0\24\32\1\u0267\5\32\3\0\33\32\21\0\1\32"+
    "\2\0\21\32\1\u01cd\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\21\32\1\u0268\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\21\32\1\u0269\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\13\32\1\u026a\16\32\3\0\33\32\21\0\1\32"+
    "\2\0\32\32\3\0\24\32\1\u026b\6\32\21\0\1\32"+
    "\2\0\23\32\1\u026c\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\1\32\1\u026d\24\32\1\u026e\3\32\3\0\33\32"+
    "\21\0\1\32\2\0\32\32\3\0\5\32\1\u026f\25\32"+
    "\21\0\1\32\2\0\4\32\1\u0270\25\32\3\0\33\32"+
    "\21\0\1\32\2\0\21\32\1\u0271\10\32\3\0\33\32"+
    "\21\0\1\32\2\0\1\u0272\31\32\3\0\33\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u0273\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\u0274\10\32\21\0"+
    "\1\32\2\0\21\32\1\u0275\10\32\3\0\33\32\21\0"+
    "\1\32\2\0\1\32\1\u0276\30\32\3\0\33\32\21\0"+
    "\1\32\2\0\17\32\1\u0277\12\32\3\0\33\32\21\0"+
    "\1\32\2\0\4\32\1\u0278\25\32\3\0\33\32\21\0"+
    "\1\32\2\0\2\32\1\u0279\27\32\3\0\33\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u027a\25\32\21\0"+
    "\1\32\2\0\22\32\1\u027b\7\32\3\0\33\32\21\0"+
    "\1\32\2\0\6\32\1\u027c\23\32\3\0\33\32\21\0"+
    "\1\32\2\0\2\32\1\u027d\27\32\3\0\33\32\21\0"+
    "\1\32\2\0\15\32\1\u027e\14\32\3\0\33\32\21\0"+
    "\1\32\2\0\23\32\1\u027f\6\32\3\0\33\32\21\0"+
    "\1\32\2\0\4\32\1\u0280\25\32\3\0\33\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\u0281\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u0282\21\32\21\0"+
    "\1\32\2\0\32\32\3\0\3\32\1\u0283\27\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\u0284\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\3\32\1\u0285\27\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u0286\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u01ca\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\7\32\1\u0287\23\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u0288\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u0289\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\13\32\1\u01ca\17\32\21\0"+
    "\1\32\2\0\32\32\3\0\10\32\1\u028a\22\32\21\0"+
    "\1\32\2\0\32\32\3\0\23\32\1\u028b\7\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\372\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u028c\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u028d\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u028e\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u028f\21\32\21\0"+
    "\1\32\2\0\32\32\3\0\15\32\1\u0290\15\32\21\0"+
    "\1\32\2\0\32\32\3\0\31\32\1\u0291\1\32\21\0"+
    "\1\32\2\0\32\32\3\0\25\32\1\u0292\5\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\u0293\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u0294\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u014c\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u015b\21\32\21\0"+
    "\1\32\2\0\32\32\3\0\31\32\1\273\1\32\21\0"+
    "\1\32\2\0\32\32\3\0\20\32\1\u0295\12\32\21\0"+
    "\1\32\2\0\32\32\3\0\22\32\1\u0296\10\32\21\0"+
    "\1\32\2\0\32\32\3\0\16\32\1\u0297\3\32\1\u0298"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\14\32\1\u0299"+
    "\16\32\21\0\1\32\2\0\32\32\3\0\25\32\1\u029a"+
    "\5\32\21\0\1\32\2\0\32\32\3\0\11\32\1\u029b"+
    "\21\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u0286"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\24\32\1\u029c"+
    "\6\32\21\0\1\32\2\0\32\32\3\0\10\32\1\u0217"+
    "\22\32\21\0\1\32\2\0\32\32\3\0\10\32\1\u029d"+
    "\22\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u029e"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\22\32\1\u029f"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\22\32\1\u02a0"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\1\32\1\u02a1"+
    "\31\32\21\0\1\32\2\0\32\32\3\0\22\32\1\u02a2"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\4\32\1\u02a3"+
    "\26\32\21\0\1\32\2\0\32\32\3\0\11\32\1\u02a4"+
    "\21\32\21\0\1\32\2\0\32\32\3\0\10\32\1\u02a5"+
    "\22\32\71\0\1\u02a6\16\0\1\u02a7\24\0\1\32\2\0"+
    "\32\32\3\0\17\32\1\u02a8\13\32\71\0\1\u02a9\16\0"+
    "\1\u02aa\24\0\1\32\2\0\32\32\3\0\16\32\1\u02ab"+
    "\14\32\21\0\1\32\2\0\32\32\3\0\14\32\1\u02ac"+
    "\16\32\21\0\1\32\2\0\32\32\3\0\3\32\1\237"+
    "\27\32\21\0\1\32\2\0\32\32\3\0\22\32\1\u02ad"+
    "\10\32\21\0\1\32\2\0\32\32\3\0\6\32\1\u02ae"+
    "\13\32\1\u02af\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02b0\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u02b1\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\17\32\1\u02b2\13\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u02b3\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\14\32\1\u0286\16\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02b4\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02b5\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02b6\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u02b7\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u02b8\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0217\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u02b9\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u02ba\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u02bb\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\22\32\1\u02bc\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02bd\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\17\32\1\u02be\13\32\21\0\1\32\2\0\32\32\3\0"+
    "\13\32\1\u0217\17\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\u0176\14\32\21\0\1\32\2\0\32\32\3\0"+
    "\3\32\1\u02bf\27\32\21\0\1\32\2\0\32\32\3\0"+
    "\22\32\1\u02ab\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\3\32\1\u02c0\27\32\21\0\1\32\2\0\32\32\3\0"+
    "\10\32\1\u02c1\22\32\21\0\1\32\2\0\32\32\3\0"+
    "\27\32\1\u01a7\3\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02c2\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\6\32\1\u02c3\24\32\21\0\1\32\2\0\32\32\3\0"+
    "\6\32\1\u02c4\24\32\21\0\1\32\2\0\32\32\3\0"+
    "\7\32\1\u02c5\23\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02c6\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\25\32\1\u02c7\5\32\21\0\1\32\2\0\32\32\3\0"+
    "\2\32\1\u02c8\30\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02c9\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0220\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\10\32\1\u02ca\22\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u02cb\26\32\21\0\1\32\2\0\10\32\1\u02cc"+
    "\21\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u02cd\26\32\21\0\1\32\2\0\4\32\1\u02ce"+
    "\25\32\3\0\33\32\21\0\1\32\2\0\3\32\1\u02cf"+
    "\26\32\3\0\33\32\21\0\1\32\2\0\23\32\1\u02d0"+
    "\6\32\3\0\33\32\21\0\1\32\2\0\15\32\1\u02d1"+
    "\14\32\3\0\33\32\21\0\1\32\2\0\4\32\1\u02d2"+
    "\25\32\3\0\33\32\21\0\1\32\2\0\13\32\1\u02d3"+
    "\16\32\3\0\33\32\21\0\1\32\2\0\4\32\1\u02d4"+
    "\25\32\3\0\33\32\34\0\1\u02d5\100\0\1\32\2\0"+
    "\1\u02d6\31\32\3\0\33\32\21\0\1\32\2\0\23\32"+
    "\1\u02b9\6\32\3\0\33\32\21\0\1\32\2\0\22\32"+
    "\1\273\7\32\3\0\33\32\21\0\1\32\2\0\6\32"+
    "\1\u02d7\23\32\3\0\33\32\35\0\1\u02d8\64\0\1\u02d9"+
    "\12\0\1\32\2\0\32\32\3\0\33\32\21\0\1\32"+
    "\2\0\6\32\1\u02da\23\32\3\0\33\32\21\0\1\32"+
    "\2\0\3\32\1\u02db\26\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\u02dc\6\32\3\0\33\32\21\0\1\32"+
    "\2\0\22\32\1\u02dd\7\32\3\0\33\32\21\0\1\32"+
    "\2\0\13\32\1\273\16\32\3\0\33\32\21\0\1\32"+
    "\2\0\23\32\1\u02de\6\32\3\0\33\32\6\0\1\u02df"+
    "\12\0\1\32\2\0\32\32\3\0\33\32\21\0\1\32"+
    "\2\0\21\32\1\u02e0\10\32\3\0\33\32\21\0\1\32"+
    "\2\0\32\32\3\0\11\32\1\u02e1\21\32\21\0\1\32"+
    "\2\0\32\32\3\0\1\32\1\u02e2\31\32\21\0\1\32"+
    "\2\0\10\32\1\u02e3\21\32\3\0\33\32\21\0\1\32"+
    "\2\0\1\u02e4\31\32\3\0\33\32\21\0\1\32\2\0"+
    "\16\32\1\u02e5\13\32\3\0\33\32\21\0\1\32\2\0"+
    "\15\32\1\u02e6\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u02e7\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\4\32\1\u02e8\26\32\21\0\1\32\2\0"+
    "\1\u02e9\31\32\3\0\33\32\21\0\1\32\2\0\4\32"+
    "\1\u02ea\25\32\3\0\33\32\21\0\1\32\2\0\1\u02eb"+
    "\31\32\3\0\33\32\6\0\1\u02ec\12\0\1\32\2\0"+
    "\32\32\3\0\33\32\21\0\1\32\2\0\4\32\1\u02ed"+
    "\25\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02ee\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\22\32\1\u02ef\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02f0\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02f1\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\22\32\1\u02f2\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02f3\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\15\32\1\u02f4\15\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u02f5\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\22\32\1\u02f6\10\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\u02f7\14\32\21\0\1\32\2\0\32\32\3\0"+
    "\1\32\1\u02f8\31\32\21\0\1\32\2\0\32\32\3\0"+
    "\20\32\1\u0199\12\32\21\0\1\32\2\0\32\32\3\0"+
    "\14\32\1\u02f9\16\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u02d4\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02b9\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u02fa\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u02fb\16\32\1\u02fc\7\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u02fd\14\32\21\0\1\32\2\0"+
    "\32\32\3\0\14\32\1\u02fe\16\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u02ff\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u0300\23\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u0301\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u0302\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\15\32\1\u0303\15\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u0304\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u02dc\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u0305\14\32\21\0\1\32\2\0"+
    "\32\32\3\0\6\32\1\u0306\24\32\21\0\1\32\2\0"+
    "\32\32\3\0\1\32\1\357\31\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u0307\14\32\66\0\1\u0308\117\0"+
    "\1\u0309\42\0\1\32\2\0\32\32\3\0\4\32\1\u030a"+
    "\26\32\66\0\1\u030b\117\0\1\u030c\42\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u030d\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\27\32\1\u030e\3\32\21\0\1\32\2\0"+
    "\32\32\3\0\14\32\1\u030f\16\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u0310\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\7\32\1\u0311\23\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u0312\14\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u0220\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\23\32\1\u0313\7\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u0314\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u0315\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\3\32\1\u0316\27\32\21\0\1\32\2\0"+
    "\32\32\3\0\3\32\1\u0181\27\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u0317\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u0286\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u0318\14\32\21\0\1\32\2\0"+
    "\32\32\3\0\6\32\1\u0319\24\32\21\0\1\32\2\0"+
    "\32\32\3\0\24\32\1\u031a\6\32\21\0\1\32\2\0"+
    "\32\32\3\0\10\32\1\273\22\32\21\0\1\32\2\0"+
    "\32\32\3\0\22\32\1\u031b\10\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u031c\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u02d1\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\16\32\1\u031d\14\32\21\0\1\32\2\0"+
    "\32\32\3\0\5\32\1\u02ed\25\32\21\0\1\32\2\0"+
    "\32\32\3\0\1\32\1\u031e\31\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u031f\21\32\21\0\1\32\2\0"+
    "\32\32\3\0\11\32\1\u0320\21\32\21\0\1\32\2\0"+
    "\15\32\1\u0321\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\15\32\1\u0322\14\32\3\0\33\32\21\0\1\32\2\0"+
    "\4\32\1\u0323\25\32\3\0\33\32\6\0\1\u0324\12\0"+
    "\1\32\2\0\32\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u0325\6\32\3\0\33\32\41\0\1\u0326\73\0"+
    "\1\32\2\0\13\32\1\u0327\16\32\3\0\33\32\21\0"+
    "\1\32\2\0\15\32\1\u0328\14\32\3\0\33\32\42\0"+
    "\1\u0329\76\0\1\u032a\107\0\1\32\2\0\4\32\1\u032b"+
    "\25\32\3\0\33\32\21\0\1\32\2\0\4\32\1\u032c"+
    "\25\32\3\0\33\32\25\0\1\u032d\107\0\1\32\2\0"+
    "\30\32\1\u032e\1\32\3\0\33\32\21\0\1\32\2\0"+
    "\32\32\3\0\17\32\1\u032f\13\32\21\0\1\32\2\0"+
    "\32\32\3\0\15\32\1\u0330\15\32\21\0\1\32\2\0"+
    "\2\32\1\u01d9\27\32\3\0\33\32\21\0\1\32\2\0"+
    "\2\32\1\u0331\27\32\3\0\33\32\21\0\1\32\2\0"+
    "\10\32\1\u0332\21\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u0333\6\32\3\0\33\32\21\0\1\32\2\0"+
    "\2\32\1\u0334\27\32\3\0\33\32\21\0\1\32\2\0"+
    "\21\32\1\u0335\10\32\3\0\33\32\21\0\1\32\2\0"+
    "\23\32\1\u0336\6\32\3\0\33\32\24\0\1\u0337\110\0"+
    "\1\32\2\0\32\32\3\0\3\32\1\u0338\27\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u0293\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u0339\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\16\32\1\u0148\14\32\21\0"+
    "\1\32\2\0\32\32\3\0\30\32\1\u0148\2\32\21\0"+
    "\1\32\2\0\32\32\3\0\25\32\1\u033a\5\32\21\0"+
    "\1\32\2\0\32\32\3\0\25\32\1\u033b\5\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u0148\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u0325\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\23\32\1\u02ab\7\32\21\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u033c\21\32\21\0"+
    "\1\32\2\0\32\32\3\0\31\32\1\u02b9\1\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u02f1\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\16\32\1\u033d\14\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u033e\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u033f\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\3\32\1\u0340\27\32\21\0"+
    "\1\32\2\0\32\32\3\0\1\32\1\u0341\31\32\72\0"+
    "\1\u0342\106\0\1\u0343\120\0\1\u0344\106\0\1\u0345\47\0"+
    "\1\32\2\0\32\32\3\0\11\32\1\u0346\21\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u0347\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\4\32\1\u0315\26\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u0348\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\7\32\1\u0349\23\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u034a\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\31\32\1\u034b\1\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u0181\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u02ba\6\32\21\0"+
    "\1\32\2\0\32\32\3\0\4\32\1\u0181\26\32\21\0"+
    "\1\32\2\0\32\32\3\0\17\32\1\u034c\13\32\21\0"+
    "\1\32\2\0\32\32\3\0\16\32\1\u034d\14\32\21\0"+
    "\1\32\2\0\32\32\3\0\5\32\1\u034e\25\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u0181\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u034f\16\32\21\0"+
    "\1\32\2\0\32\32\3\0\14\32\1\u0350\16\32\21\0"+
    "\1\32\2\0\2\32\1\u0351\27\32\3\0\33\32\47\0"+
    "\1\u0352\73\0\1\u0353\105\0\1\32\2\0\4\32\1\u0354"+
    "\25\32\3\0\33\32\6\0\1\u0355\12\0\1\32\2\0"+
    "\32\32\3\0\33\32\34\0\1\u0356\133\0\1\u0357\60\0"+
    "\1\32\2\0\2\32\1\u0358\27\32\3\0\33\32\54\0"+
    "\1\u0359\45\0\1\u035a\12\0\1\32\2\0\32\32\3\0"+
    "\33\32\21\0\1\32\2\0\32\32\3\0\16\32\1\u035b"+
    "\14\32\21\0\1\32\2\0\12\32\1\u02d0\17\32\3\0"+
    "\33\32\21\0\1\32\2\0\15\32\1\u0258\14\32\3\0"+
    "\33\32\21\0\1\32\2\0\23\32\1\u035c\6\32\3\0"+
    "\33\32\21\0\1\32\2\0\4\32\1\u035d\25\32\3\0"+
    "\33\32\37\0\1\u035e\75\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u023c\6\32\21\0\1\32\2\0\32\32\3\0"+
    "\25\32\1\u035f\5\32\21\0\1\32\2\0\32\32\3\0"+
    "\3\32\1\u0360\27\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0361\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\17\32\1\u0226\13\32\6\0\1\u0362\12\0\1\32\2\0"+
    "\32\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\261\14\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\u0363\14\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0364\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\3\32\1\u0365\27\32\70\0\1\u0366\130\0\1\u0367\76\0"+
    "\1\u0368\130\0\1\u0369\27\0\1\32\2\0\32\32\3\0"+
    "\23\32\1\u036a\7\32\21\0\1\32\2\0\32\32\3\0"+
    "\27\32\1\u036b\3\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u036c\25\32\6\0\1\u036d\12\0\1\32\2\0"+
    "\32\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\16\32\1\u036e\14\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u036f\25\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u0148\26\32\21\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u0370\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\5\32\1\u0371\25\32\21\0\1\32\2\0\21\32\1\u0372"+
    "\10\32\3\0\33\32\24\0\1\u0373\117\0\1\u0374\104\0"+
    "\1\32\2\0\15\32\1\u0375\14\32\3\0\33\32\36\0"+
    "\1\u0376\116\0\1\u0377\73\0\1\32\2\0\23\32\1\u0378"+
    "\6\32\3\0\33\32\36\0\1\u0379\76\0\1\32\2\0"+
    "\10\32\1\u037a\21\32\3\0\33\32\37\0\1\u037b\75\0"+
    "\1\32\2\0\32\32\3\0\16\32\1\u037c\14\32\21\0"+
    "\1\32\2\0\32\32\3\0\24\32\1\u037d\6\32\74\0"+
    "\1\u037e\40\0\1\32\2\0\32\32\3\0\24\32\1\u037f"+
    "\6\32\21\0\1\32\2\0\32\32\3\0\17\32\1\u0380"+
    "\13\32\21\0\1\32\2\0\32\32\3\0\5\32\1\u0381"+
    "\25\32\71\0\1\u0382\113\0\1\u0383\113\0\1\u0384\113\0"+
    "\1\u0385\43\0\1\32\2\0\32\32\3\0\5\32\1\u0386"+
    "\25\32\21\0\1\32\2\0\32\32\3\0\16\32\1\237"+
    "\14\32\74\0\1\u0387\40\0\1\32\2\0\32\32\3\0"+
    "\11\32\1\u0388\21\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u01dc\26\32\21\0\1\32\2\0\32\32\3\0"+
    "\24\32\1\u0389\6\32\21\0\1\32\2\0\4\32\1\u038a"+
    "\25\32\3\0\33\32\25\0\1\u038b\141\0\1\u038c\61\0"+
    "\1\32\2\0\2\32\1\u038d\27\32\3\0\33\32\30\0"+
    "\1\u038e\113\0\1\u038f\104\0\1\32\2\0\16\32\1\u0390"+
    "\13\32\3\0\33\32\21\0\1\32\2\0\32\32\3\0"+
    "\4\32\1\u0391\26\32\21\0\1\32\2\0\32\32\3\0"+
    "\17\32\1\u0392\13\32\66\0\1\u0393\46\0\1\32\2\0"+
    "\32\32\3\0\23\32\1\u0381\7\32\21\0\1\32\2\0"+
    "\32\32\3\0\6\32\1\u0394\24\32\105\0\1\u0395\113\0"+
    "\1\u0396\74\0\1\u0397\46\0\1\32\2\0\32\32\3\0"+
    "\32\32\1\u0398\21\0\1\32\2\0\32\32\3\0\31\32"+
    "\1\u0399\1\32\21\0\1\32\2\0\14\32\1\u039a\15\32"+
    "\3\0\33\32\37\0\1\u039b\75\0\1\32\2\0\4\32"+
    "\1\373\25\32\3\0\33\32\54\0\1\u039c\113\0\1\u039d"+
    "\60\0\1\32\2\0\15\32\1\u02d0\14\32\3\0\33\32"+
    "\16\0\1\u039e\2\0\1\32\2\0\32\32\3\0\33\32"+
    "\21\0\1\32\2\0\32\32\3\0\22\32\1\u039f\10\32"+
    "\112\0\1\u039c\113\0\1\u039d\22\0\1\32\2\0\32\32"+
    "\3\0\5\32\1\u03a0\25\32\21\0\1\32\2\0\4\32"+
    "\1\u03a1\25\32\3\0\33\32\30\0\1\u03a2\147\0\1\u03a3"+
    "\50\0\1\32\2\0\32\32\3\0\4\32\1\u0293\26\32"+
    "\21\0\1\32\2\0\15\32\1\u03a4\14\32\3\0\33\32"+
    "\100\0\1\u03a5\34\0\1\32\2\0\23\32\1\u03a6\6\32"+
    "\3\0\33\32\75\0\1\u03a7\116\0\1\u03a8\116\0\1\u03a9"+
    "\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[59888];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\1\1\1\11\3\1\1\11"+
    "\31\1\2\11\27\1\2\11\2\1\1\0\1\11\1\0"+
    "\1\11\2\1\1\0\241\1\1\0\u0135\1\1\0\1\1"+
    "\1\0\70\1\1\0\5\1\1\0\101\1\2\0\1\1"+
    "\2\0\52\1\1\0\2\1\2\0\5\1\1\0\14\1"+
    "\1\0\33\1\2\0\1\1\2\0\27\1\1\0\1\1"+
    "\1\0\2\1\2\0\2\1\1\0\11\1\1\0\12\1"+
    "\4\0\14\1\2\0\1\1\2\0\1\11\1\1\1\11"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\4\0\3\1"+
    "\1\0\5\1\2\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\3\1\1\0\1\11\1\0"+
    "\1\11\1\1\1\0\3\1\1\0\1\11\1\1\2\0"+
    "\3\1\1\0\1\1\2\11\1\0\3\1\1\0\2\11"+
    "\1\0\3\1\1\11\1\0\1\1\1\0\1\1\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  codJFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexeme = yytext(); return Error;
            }
          // fall through
          case 153: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 154: break;
          case 3:
            { lexeme=yytext(); return Caracter_especial;
            }
          // fall through
          case 155: break;
          case 4:
            { lexeme=yytext(); return Comillas;
            }
          // fall through
          case 156: break;
          case 5:
            { lexeme=yytext(); return Parentesis_Izq;
            }
          // fall through
          case 157: break;
          case 6:
            { lexeme=yytext(); return Parentesis_Der;
            }
          // fall through
          case 158: break;
          case 7:
            { lexeme=yytext(); return Simbolo_de_puntuacion;
            }
          // fall through
          case 159: break;
          case 8:
            { lexeme = yytext();return Numero;
            }
          // fall through
          case 160: break;
          case 9:
            { lexeme=yytext(); return Operador_comparativo;
            }
          // fall through
          case 161: break;
          case 10:
            { lexeme=yytext(); return Asigna;
            }
          // fall through
          case 162: break;
          case 11:
            { lexeme=yytext(); return Identificador;
            }
          // fall through
          case 163: break;
          case 12:
            { lexeme=yytext(); return Corchete_Izq;
            }
          // fall through
          case 164: break;
          case 13:
            { lexeme=yytext(); return Corchete_Der;
            }
          // fall through
          case 165: break;
          case 14:
            { lexeme=yytext(); return Llave_Izq;
            }
          // fall through
          case 166: break;
          case 15:
            { lexeme=yytext(); return Llave_Der;
            }
          // fall through
          case 167: break;
          case 16:
            { lexeme = yytext(); return Literal;
            }
          // fall through
          case 168: break;
          case 17:
            { lexeme=yytext(); return Operadores_aritmeticos;
            }
          // fall through
          case 169: break;
          case 18:
            { lexeme=yytext(); return Pertenencia;
            }
          // fall through
          case 170: break;
          case 19:
            { lexeme=yytext(); return Salto_si_es_igual;
            }
          // fall through
          case 171: break;
          case 20:
            { lexeme=yytext(); return Salto_si_es_mayor;
            }
          // fall through
          case 172: break;
          case 21:
            { lexeme=yytext(); return Salto_si_es_menor;
            }
          // fall through
          case 173: break;
          case 22:
            { lexeme=yytext(); return Operadores_logicos;
            }
          // fall through
          case 174: break;
          case 23:
            { lexeme=yytext(); return Bucles;
            }
          // fall through
          case 175: break;
          case 24:
            { lexeme=yytext(); return Declaracion_de_funcion;
            }
          // fall through
          case 176: break;
          case 25:
            { lexeme=yytext(); return Pregunta;
            }
          // fall through
          case 177: break;
          case 26:
            { lexeme=yytext(); return Referencia;
            }
          // fall through
          case 178: break;
          case 27:
            { lexeme=yytext(); return Funcion_matematica;
            }
          // fall through
          case 179: break;
          case 28:
            { lexeme=yytext(); return Limpiador;
            }
          // fall through
          case 180: break;
          case 29:
            { lexeme=yytext(); return Comparacion;
            }
          // fall through
          case 181: break;
          case 30:
            { lexeme=yytext(); return Decremento;
            }
          // fall through
          case 182: break;
          case 31:
            { lexeme=yytext(); return Division;
            }
          // fall through
          case 183: break;
          case 32:
            { lexeme=yytext(); return Fin_de_bloque;
            }
          // fall through
          case 184: break;
          case 33:
            { lexeme=yytext(); return Puntero;
            }
          // fall through
          case 185: break;
          case 34:
            { lexeme=yytext(); return Recuperar;
            }
          // fall through
          case 186: break;
          case 35:
            { lexeme=yytext(); return Incremento;
            }
          // fall through
          case 187: break;
          case 36:
            { lexeme=yytext(); return Interrupcion;
            }
          // fall through
          case 188: break;
          case 37:
            { lexeme=yytext(); return Salto_si_es_mayor_igual;
            }
          // fall through
          case 189: break;
          case 38:
            { lexeme=yytext(); return Salto_si_es_menor_igual;
            }
          // fall through
          case 190: break;
          case 39:
            { lexeme=yytext(); return Salto;
            }
          // fall through
          case 191: break;
          case 40:
            { lexeme=yytext(); return Salto_si_es_diferente;
            }
          // fall through
          case 192: break;
          case 41:
            { lexeme=yytext(); return Transferencia;
            }
          // fall through
          case 193: break;
          case 42:
            { lexeme=yytext(); return Quitar_de_pila;
            }
          // fall through
          case 194: break;
          case 43:
            { lexeme=yytext(); return Retorno;
            }
          // fall through
          case 195: break;
          case 44:
            { lexeme=yytext(); return Desplazamiento_izquierda;
            }
          // fall through
          case 196: break;
          case 45:
            { lexeme=yytext(); return Desplazamiento_derecha;
            }
          // fall through
          case 197: break;
          case 46:
            { lexeme=yytext(); return Compresor;
            }
          // fall through
          case 198: break;
          case 47:
            { lexeme=yytext(); return Agregador;
            }
          // fall through
          case 199: break;
          case 48:
            { lexeme=yytext(); return Tipo_de_dato;
            }
          // fall through
          case 200: break;
          case 49:
            { lexeme=yytext(); return Eliminador;
            }
          // fall through
          case 201: break;
          case 50:
            { lexeme=yytext(); return Asociacion;
            }
          // fall through
          case 202: break;
          case 51:
            { lexeme=yytext(); return Funcion_de_mapeo;
            }
          // fall through
          case 203: break;
          case 52:
            { lexeme=yytext(); return Modificador_de_acceso;
            }
          // fall through
          case 204: break;
          case 53:
            { lexeme=yytext(); return Generador_de_objetos;
            }
          // fall through
          case 205: break;
          case 54:
            { lexeme=yytext(); return Hardware;
            }
          // fall through
          case 206: break;
          case 55:
            { lexeme=yytext(); return Arriba;
            }
          // fall through
          case 207: break;
          case 56:
            { lexeme=yytext(); return Intento;
            }
          // fall through
          case 208: break;
          case 57:
            { lexeme=yytext(); return Invocador;
            }
          // fall through
          case 209: break;
          case 58:
            { lexeme=yytext(); return Inicializador;
            }
          // fall through
          case 210: break;
          case 59:
            { lexeme=yytext(); return Evaluador_de_tiempo;
            }
          // fall through
          case 211: break;
          case 60:
            { lexeme=yytext(); return Alto;
            }
          // fall through
          case 212: break;
          case 61:
            { lexeme=yytext(); return Retorno_e_interrupcion;
            }
          // fall through
          case 213: break;
          case 62:
            { lexeme=yytext(); return Combinadores;
            }
          // fall through
          case 214: break;
          case 63:
            { lexeme=yytext(); return Busqueda;
            }
          // fall through
          case 215: break;
          case 64:
            { lexeme=yytext(); return Valores_especiales;
            }
          // fall through
          case 216: break;
          case 65:
            { lexeme=yytext(); return Abridor_de_archivos;
            }
          // fall through
          case 217: break;
          case 66:
            { lexeme=yytext(); return Insertar_en_pila;
            }
          // fall through
          case 218: break;
          case 67:
            { lexeme=yytext(); return Guardar;
            }
          // fall through
          case 219: break;
          case 68:
            { lexeme=yytext(); return Caso;
            }
          // fall through
          case 220: break;
          case 69:
            { lexeme=yytext(); return Copiar;
            }
          // fall through
          case 221: break;
          case 70:
            { lexeme=yytext(); return Sino_pregunta;
            }
          // fall through
          case 222: break;
          case 71:
            { lexeme=yytext(); return Sino;
            }
          // fall through
          case 223: break;
          case 72:
            { lexeme=yytext(); return Seguridad;
            }
          // fall through
          case 224: break;
          case 73:
            { lexeme=yytext(); return Tipo_de_estructura;
            }
          // fall through
          case 225: break;
          case 74:
            { lexeme=yytext(); return Izquierda;
            }
          // fall through
          case 226: break;
          case 75:
            { lexeme=yytext(); return Hacer_nada;
            }
          // fall through
          case 227: break;
          case 76:
            { lexeme=yytext(); return Abstraccion;
            }
          // fall through
          case 228: break;
          case 77:
            { lexeme=yytext(); return Bloque_paralelo;
            }
          // fall through
          case 229: break;
          case 78:
            { lexeme=yytext(); return Retorno_vacio;
            }
          // fall through
          case 230: break;
          case 79:
            { lexeme=yytext(); return Alineación;
            }
          // fall through
          case 231: break;
          case 80:
            { lexeme=yytext(); return Alterador;
            }
          // fall through
          case 232: break;
          case 81:
            { lexeme=yytext(); return Color;
            }
          // fall through
          case 233: break;
          case 82:
            { lexeme=yytext(); return Fin_de_pregunta;
            }
          // fall through
          case 234: break;
          case 83:
            { lexeme=yytext(); return Ingresa;
            }
          // fall through
          case 235: break;
          case 84:
            { lexeme=yytext(); return Restriccion;
            }
          // fall through
          case 236: break;
          case 85:
            { lexeme=yytext(); return Movimiento_con_byte;
            }
          // fall through
          case 237: break;
          case 86:
            { lexeme=yytext(); return Movimiento_con_palabras;
            }
          // fall through
          case 238: break;
          case 87:
            { lexeme=yytext(); return Mezclador_de_estructura;
            }
          // fall through
          case 239: break;
          case 88:
            { lexeme=yytext(); return Union;
            }
          // fall through
          case 240: break;
          case 89:
            { lexeme=yytext(); return Condicion;
            }
          // fall through
          case 241: break;
          case 90:
            { lexeme=yytext(); return Asincronia;
            }
          // fall through
          case 242: break;
          case 91:
            { lexeme=yytext(); return Multimedia;
            }
          // fall through
          case 243: break;
          case 92:
            { lexeme=yytext(); return Atrapa_errores;
            }
          // fall through
          case 244: break;
          case 93:
            { lexeme=yytext(); return Crear_clase;
            }
          // fall through
          case 245: break;
          case 94:
            { lexeme=yytext(); return Clonar_objeto;
            }
          // fall through
          case 246: break;
          case 95:
            { lexeme=yytext(); return Concurrencia;
            }
          // fall through
          case 247: break;
          case 96:
            { lexeme=yytext(); return Coincide;
            }
          // fall through
          case 248: break;
          case 97:
            { lexeme=yytext(); return Herencia;
            }
          // fall through
          case 249: break;
          case 98:
            { lexeme=yytext(); return Imprime;
            }
          // fall through
          case 250: break;
          case 99:
            { lexeme=yytext(); return Excepcion;
            }
          // fall through
          case 251: break;
          case 100:
            { lexeme=yytext(); return Derecha;
            }
          // fall through
          case 252: break;
          case 101:
            { lexeme=yytext(); return Implementacion;
            }
          // fall through
          case 253: break;
          case 102:
            { lexeme=yytext(); return Dimension_anchura;
            }
          // fall through
          case 254: break;
          case 103:
            { lexeme=yytext(); return Suspensor_de_funcion;
            }
          // fall through
          case 255: break;
          case 104:
            { lexeme=yytext(); return Agregador_a_lista;
            }
          // fall through
          case 256: break;
          case 105:
            { lexeme=yytext(); return Transaccion;
            }
          // fall through
          case 257: break;
          case 106:
            { lexeme=yytext(); return Asignador_de_memoria;
            }
          // fall through
          case 258: break;
          case 107:
            { lexeme=yytext(); return Creador_de_estructura;
            }
          // fall through
          case 259: break;
          case 108:
            { lexeme=yytext(); return Agrupación;
            }
          // fall through
          case 260: break;
          case 109:
            { lexeme=yytext(); return Insertar;
            }
          // fall through
          case 261: break;
          case 110:
            { lexeme=yytext(); return Operador_de_direccion;
            }
          // fall through
          case 262: break;
          case 111:
            { lexeme=yytext(); return Consulta;
            }
          // fall through
          case 263: break;
          case 112:
            { lexeme=yytext(); return Clase_sellada;
            }
          // fall through
          case 264: break;
          case 113:
            { lexeme=yytext(); return Actualizar;
            }
          // fall through
          case 265: break;
          case 114:
            { lexeme=yytext(); return Memoria_dinamica;
            }
          // fall through
          case 266: break;
          case 115:
            { lexeme=yytext(); return Depuracion;
            }
          // fall through
          case 267: break;
          case 116:
            { lexeme=yytext(); return Abajo;
            }
          // fall through
          case 268: break;
          case 117:
            { lexeme=yytext(); return Exportador;
            }
          // fall through
          case 269: break;
          case 118:
            { lexeme=yytext(); return Dimension_altura;
            }
          // fall through
          case 270: break;
          case 119:
            { lexeme=yytext(); return Importar;
            }
          // fall through
          case 271: break;
          case 120:
            { lexeme=yytext(); return Margen;
            }
          // fall through
          case 272: break;
          case 121:
            { lexeme=yytext(); return Declarador_de_metodos;
            }
          // fall through
          case 273: break;
          case 122:
            { lexeme=yytext(); return Modulo;
            }
          // fall through
          case 274: break;
          case 123:
            { lexeme=yytext(); return Devuelve_valor;
            }
          // fall through
          case 275: break;
          case 124:
            { lexeme=yytext(); return Medidor_de_variables;
            }
          // fall through
          case 276: break;
          case 125:
            { lexeme=yytext(); return Condicion_con_rango;
            }
          // fall through
          case 277: break;
          case 126:
            { lexeme=yytext(); return Relacionador;
            }
          // fall through
          case 278: break;
          case 127:
            { lexeme=yytext(); return Por_defecto;
            }
          // fall through
          case 279: break;
          case 128:
            { lexeme=yytext(); return Clase_principal;
            }
          // fall through
          case 280: break;
          case 129:
            { lexeme=yytext(); return Declaracion_de_segmento;
            }
          // fall through
          case 281: break;
          case 130:
            { lexeme=yytext(); return Detonador;
            }
          // fall through
          case 282: break;
          case 131:
            { lexeme=yytext(); return Ordenador;
            }
          // fall through
          case 283: break;
          case 132:
            { lexeme=yytext(); return Espaciado;
            }
          // fall through
          case 284: break;
          case 133:
            { lexeme=yytext(); return Posicion;
            }
          // fall through
          case 285: break;
          case 134:
            { lexeme=yytext(); return Reductor_de_tamaño;
            }
          // fall through
          case 286: break;
          case 135:
            { lexeme=yytext(); return Reanudar;
            }
          // fall through
          case 287: break;
          case 136:
            { lexeme=yytext(); return Desbordamiento;
            }
          // fall through
          case 288: break;
          case 137:
            { lexeme=yytext(); return Modificador_de_variable;
            }
          // fall through
          case 289: break;
          case 138:
            { lexeme=yytext(); return Interseccion;
            }
          // fall through
          case 290: break;
          case 139:
            { lexeme=yytext(); return Union_global;
            }
          // fall through
          case 291: break;
          case 140:
            { lexeme=yytext(); return Interfaz;
            }
          // fall through
          case 292: break;
          case 141:
            { lexeme=yytext(); return Maxima_anchura;
            }
          // fall through
          case 293: break;
          case 142:
            { lexeme=yytext(); return Dimension_maxima_anchura;
            }
          // fall through
          case 294: break;
          case 143:
            { lexeme=yytext(); return Soltar_indice;
            }
          // fall through
          case 295: break;
          case 144:
            { lexeme=yytext(); return Instanciador;
            }
          // fall through
          case 296: break;
          case 145:
            { lexeme=yytext(); return Dimension_maxima_altura;
            }
          // fall through
          case 297: break;
          case 146:
            { lexeme=yytext(); return Minima_altura;
            }
          // fall through
          case 298: break;
          case 147:
            { lexeme=yytext(); return Visibilidad;
            }
          // fall through
          case 299: break;
          case 148:
            { lexeme=yytext(); return Clave_de_relacion;
            }
          // fall through
          case 300: break;
          case 149:
            { lexeme=yytext(); return Clave;
            }
          // fall through
          case 301: break;
          case 150:
            { lexeme=yytext(); return Constructor;
            }
          // fall through
          case 302: break;
          case 151:
            { lexeme=yytext(); return Creador_de_tabla;
            }
          // fall through
          case 303: break;
          case 152:
            { lexeme=yytext(); return Color_de_fondo;
            }
          // fall through
          case 304: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
