/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package analizadorlexicozamoranoomar;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;


/**
 *
 * @author Usuario
 */
public class Interfaz extends javax.swing.JFrame {
static final Map<String, Integer> tabla_de_simbolos = new LinkedHashMap<>();
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Elegir archivo txt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(jButton1)
                .addContainerGap(220, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.showOpenDialog(null);
    
    try {
        Reader lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));
        codJFlex lexer = new codJFlex(lector);
        String resultado = "";
        
        while (true) {
            Tokens tokens = lexer.yylex();
            if (tokens == null) {            
                jTextArea1.setText(resultado);  
                return;
            }
                   
            if (tokens == Tokens.Error) {            
                resultado += lexer.lexeme + " ERROR: Lexema no identificado\n";
                continue;
            }
            
            if (tokens == Tokens.Abridor_de_archivos) {
                resultado += "Token: " + Tokens.Abridor_de_archivos + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Abstraccion) {            
                resultado += "Token: " + Tokens.Abstraccion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Actualizar) {            
                resultado += "Token: " + Tokens.Actualizar + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Agregador_a_lista) {            
                resultado += "Token: " + Tokens.Agregador_a_lista + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Agrupación) {            
                resultado += "Token: " + Tokens.Agrupación + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Alterador) {            
                resultado += "Token: " + Tokens.Alterador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Alto) {            
                resultado += "Token: " + Tokens.Alto + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Asigna) {            
                resultado += "Token: " + Tokens.Asigna + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Asignador_de_memoria) {            
                resultado += "Token: " + Tokens.Asignador_de_memoria + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Asociacion) {            
                resultado += "Token: " + Tokens.Asociacion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Bucles) {            
                resultado += "Token: " + Tokens.Bucles + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Caracter_especial) {            
                resultado += "Token: " + Tokens.Caracter_especial + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Clase_sellada) {            
                resultado += "Token: " + Tokens.Clase_sellada + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Clave) {            
                resultado += "Token: " + Tokens.Clave + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Clave_de_relacion) {            
                resultado += "Token: " + Tokens.Clave_de_relacion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Color) {            
                resultado += "Token: " + Tokens.Color + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Combinadores) {            
                resultado += "Token: " + Tokens.Combinadores + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Comparacion) {            
                resultado += "Token: " + Tokens.Comparacion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Compresor) {            
                resultado += "Token: " + Tokens.Compresor + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Concurrencia) {            
                resultado += "Token: " + Tokens.Concurrencia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Creador_de_estructura) {            
                resultado += "Token: " + Tokens.Creador_de_estructura + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Declaracion_de_funcion) {            
                resultado += "Token: " + Tokens.Declaracion_de_funcion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Depuracion) {            
                resultado += "Token: " + Tokens.Depuracion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Eliminador) {            
                resultado += "Token: " + Tokens.Eliminador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Evaluador_de_tiempo) {            
                resultado += "Token: " + Tokens.Evaluador_de_tiempo + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Excepcion) {            
                resultado += "Token: " + Tokens.Excepcion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Fin_de_bloque) {            
                resultado += "Token: " + Tokens.Fin_de_bloque + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Funcion_matematica) {            
                resultado += "Token: " + Tokens.Funcion_matematica + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Hardware) {            
                resultado += "Token: " + Tokens.Hardware + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Herencia) {            
                resultado += "Token: " + Tokens.Herencia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Incremento) {            
                resultado += "Token: " + Tokens.Incremento + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Ingresa) {            
                resultado += "Token: " + Tokens.Ingresa + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Inicializador) {            
                resultado += "Token: " + Tokens.Inicializador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Insertar) {            
                resultado += "Token: " + Tokens.Insertar + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Insertar_en_pila) {            
                resultado += "Token: " + Tokens.Insertar_en_pila + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Intento) {            
                resultado += "Token: " + Tokens.Intento + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Interfaz) {            
                resultado += "Token: " + Tokens.Interfaz + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Invocador) {            
                resultado += "Token: " + Tokens.Invocador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Limpiador) {            
                resultado += "Token: " + Tokens.Limpiador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Mezclador_de_estructura) {            
                resultado += "Token: " + Tokens.Mezclador_de_estructura + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Modificador_de_acceso) {            
                resultado += "Token: " + Tokens.Modificador_de_acceso + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Multimedia) {            
                resultado += "Token: " + Tokens.Multimedia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Operador_comparativo) {            
                resultado += "Token: " + Tokens.Operador_comparativo + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Operadores_aritmeticos) {            
                resultado += "Token: " + Tokens.Operadores_aritmeticos + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Operadores_logicos) {            
                resultado += "Token: " + Tokens.Operadores_logicos + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Ordenador) {            
                resultado += "Token: " + Tokens.Ordenador + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Pertenencia) {            
                resultado += "Token: " + Tokens.Pertenencia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Por_defecto) {            
                resultado += "Token: " + Tokens.Por_defecto + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Posicion) {            
                resultado += "Token: " + Tokens.Posicion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Pregunta) {            
                resultado += "Token: " + Tokens.Pregunta + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Puntero) {            
                resultado += "Token: " + Tokens.Puntero + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Recuperar) {            
                resultado += "Token: " + Tokens.Recuperar + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Referencia) {            
                resultado += "Token: " + Tokens.Referencia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Restriccion) {            
                resultado += "Token: " + Tokens.Restriccion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Salto) {            
                resultado += "Token: " + Tokens.Salto + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Seguridad) {            
                resultado += "Token: " + Tokens.Seguridad + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Comillas) {            
                resultado += "Token: " + Tokens.Comillas + "      Valor de atributo: " + lexer.lexeme + "\n";  
            } else if (tokens == Tokens.Simbolo_de_puntuacion) {            
                resultado += "Token: " + Tokens.Simbolo_de_puntuacion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Sino) {            
                resultado += "Token: " + Tokens.Sino + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Sino_pregunta) {            
                resultado += "Token: " + Tokens.Sino_pregunta + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Tipo_de_dato) {            
                resultado += "Token: " + Tokens.Tipo_de_dato + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Tipo_de_estructura) {            
                resultado += "Token: " + Tokens.Tipo_de_estructura + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Transaccion) {            
                resultado += "Token: " + Tokens.Transaccion + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Transferencia) {            
                resultado += "Token: " + Tokens.Transferencia + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Union) {            
                resultado += "Token: " + Tokens.Union + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Valores_especiales) {            
                resultado += "Token: " + Tokens.Valores_especiales + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Numero) {            
                resultado += "Token: " + Tokens.Numero + "      Valor de atributo: " + lexer.lexeme + "\n";
            } else if (tokens == Tokens.Identificador) {                          
                int posicion = insertarId(lexer.lexeme);
                resultado += "Token: " + Tokens.Identificador + "      Valor de atributo: " + posicion + "\n";
            }
            else {
                //resultado para los demas tokens de 1 lexema
                resultado += "Token: " + tokens + "\n";
            }
        }
    } catch (FileNotFoundException ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
    }      
    }//GEN-LAST:event_jButton1ActionPerformed

    public static int insertarId(String id) {
        if (!tabla_de_simbolos.containsKey(id)) {
            tabla_de_simbolos.put(id, tabla_de_simbolos.size()); 
        }
        return tabla_de_simbolos.get(id);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
